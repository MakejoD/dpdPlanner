// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========== AUTHENTICATION & AUTHORIZATION MODELS ==========

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  firstName    String
  lastName     String
  passwordHash String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  roleId       String
  role         Role         @relation(fields: [roleId], references: [id])
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id])
  
  // User assignments and reports
  activityAssignments   ActivityAssignment[]
  indicatorAssignments  IndicatorAssignment[]
  progressReports       ProgressReport[]
  approvedReports       ProgressReport[]     @relation("ApprovedBy")
  
  // PACC relations
  paccSchedules         PaccSchedule[]
  paccCompliancesEvaluated PaccCompliance[] @relation("EvaluatedBy")
  paccCompliancesApproved  PaccCompliance[] @relation("ApprovedBy")
  paccAlertsAssigned    PaccAlert[]          @relation("AssignedTo")
  paccAlertsEscalated   PaccAlert[]          @relation("EscalatedTo")
  paccReportsGenerated  PaccReport[]         @relation("GeneratedBy")
  paccReportsApproved   PaccReport[]         @relation("ApprovedBy")
  
  // Notification relations
  notifications         Notification[]
  
  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users           User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id       String @id @default(uuid())
  action   String // create, read, update, delete, approve, etc.
  resource String // user, role, strategic_axis, objective, etc.
  
  // Composite unique constraint
  @@unique([action, resource])

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ========== ORGANIZATIONAL STRUCTURE ==========

model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  code        String?  @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Hierarchical structure
  parentId String?
  parent   Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children Department[] @relation("DepartmentHierarchy")

  // Relations
  users                 User[]
  strategicAxes         StrategicAxis[]
  activityAssignments   ActivityAssignment[]
  indicatorAssignments  IndicatorAssignment[]

  @@map("departments")
}

// ========== POA PLANNING STRUCTURE ==========

model StrategicAxis {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String   @unique
  year        Int
  isActive    Boolean  @default(true)
  isLocked    Boolean  @default(false) // Para bloquear modificaciones una vez aprobado
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  objectives   Objective[]
  indicators   Indicator[]

  @@unique([code, year])
  @@map("strategic_axes")
}

model Objective {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  strategicAxisId String
  strategicAxis   StrategicAxis @relation(fields: [strategicAxisId], references: [id], onDelete: Cascade)
  products        Product[]
  indicators      Indicator[]

  @@unique([strategicAxisId, code])
  @@map("objectives")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String
  type        String @default("PRODUCT") // PRODUCT or SERVICE
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  objectiveId String
  objective   Objective   @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  activities  Activity[]
  indicators  Indicator[]

  @@unique([objectiveId, code])
  @@map("products")
}

model Activity {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String
  startDate   DateTime?
  endDate     DateTime?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productId               String
  product                 Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  indicators              Indicator[]
  assignments             ActivityAssignment[]
  progressReports         ProgressReport[]
  budgetExecutions        BudgetExecution[]
  
  // PACC and Budget relations
  procurementProcesses    ProcurementProcess[]
  budgetAllocations       BudgetAllocation[]
  poaPaccBudgetCorrelation PoaPaccBudgetCorrelation?
  activityProcurements    ActivityProcurement[]

  @@unique([productId, code])
  @@map("activities")
}

// ========== PERFORMANCE INDICATORS ==========

model Indicator {
  id                String        @id @default(uuid())
  name              String
  description       String?
  type              String @default("PRODUCT") // PRODUCT or RESULT
  measurementUnit   String
  baseline          Float?        @default(0)
  annualTarget      Float
  
  // Periodicidad del indicador
  reportingFrequency String @default("trimestral") // trimestral, mensual
  
  // Metas trimestrales (para compatibilidad hacia atr√°s)
  q1Target          Float?        @default(0)
  q2Target          Float?        @default(0)
  q3Target          Float?        @default(0)
  q4Target          Float?        @default(0)
  
  // Metas mensuales (solo para indicadores mensuales)
  janTarget         Float?        @default(0)
  febTarget         Float?        @default(0)
  marTarget         Float?        @default(0)
  aprTarget         Float?        @default(0)
  mayTarget         Float?        @default(0)
  junTarget         Float?        @default(0)
  julTarget         Float?        @default(0)
  augTarget         Float?        @default(0)
  sepTarget         Float?        @default(0)
  octTarget         Float?        @default(0)
  novTarget         Float?        @default(0)
  decTarget         Float?        @default(0)
  
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Polymorphic relations - an indicator can belong to different levels
  strategicAxisId String?
  strategicAxis   StrategicAxis? @relation(fields: [strategicAxisId], references: [id], onDelete: Cascade)
  
  objectiveId String?
  objective   Objective? @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  // Relations
  progressReports     ProgressReport[]
  indicatorAssignments IndicatorAssignment[]

  @@map("indicators")
}

// ========== PROGRESS TRACKING ==========

model ProgressReport {
  id                  String            @id @default(uuid())
  periodType          String            // 'trimestral', 'mensual', 'semanal'
  period              String            // '2024-Q1', '2024-01', '2024-W01'
  currentValue        Float             @default(0)
  targetValue         Float             @default(0)
  executionPercentage Float             @default(0)
  qualitativeComments String?
  challenges          String?
  nextSteps           String?
  status              String            @default("pendiente") // pendiente, aprobado, rechazado
  reviewComments      String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  reviewedAt          DateTime?

  // Relations - un reporte puede ser para una actividad O un indicador, no ambos
  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  indicatorId String?
  indicator   Indicator? @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  
  reportedById String
  reportedBy   User @relation(fields: [reportedById], references: [id])
  
  reviewedById String?
  reviewedBy   User? @relation("ApprovedBy", fields: [reviewedById], references: [id])

  // File attachments
  attachments ProgressReportAttachment[]

  @@unique([reportedById, activityId, indicatorId, periodType, period])
  @@map("progress_reports")
}

model ProgressReportAttachment {
  id             String   @id @default(uuid())
  filename       String
  filepath       String
  size           Int
  mimetype       String
  uploadedAt     DateTime @default(now())

  // Relations
  progressReportId String
  progressReport   ProgressReport @relation(fields: [progressReportId], references: [id], onDelete: Cascade)

  @@map("progress_report_attachments")
}

// ========== BUDGET EXECUTION ==========

model BudgetItem {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?
  category    String?  // Categor√≠a presupuestaria
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  budgetExecutions BudgetExecution[]

  @@map("budget_items")
}

model BudgetExecution {
  id                 String   @id @default(uuid())
  executionDate      DateTime @default(now())
  amount             Float
  description        String?
  documentNumber     String?
  executionType      String   // COMPROMISO, DEVENGADO, PAGADO
  month              String
  quarter            String
  fiscalYear         Int
  sigefReference     String?
  observations       String?
  
  // Legacy fields for compatibility
  year               Int?
  assignedAmount     Float?   @default(0)
  committedAmount    Float?   @default(0)
  accruedAmount      Float?   @default(0)
  paidAmount         Float?   @default(0)
  executionPercent   Float?   @default(0)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  budgetItemId String?
  budgetItem   BudgetItem? @relation(fields: [budgetItemId], references: [id])
  
  budgetAllocationId String?
  budgetAllocation   BudgetAllocation? @relation(fields: [budgetAllocationId], references: [id], onDelete: Cascade)

  @@map("budget_executions")
}

// ========== ACTIVITY ASSIGNMENTS ==========

model ActivityAssignment {
  id         String   @id @default(uuid())
  isMain     Boolean  @default(false) // Responsable principal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  @@unique([userId, activityId])
  @@map("activity_assignments")
}

model IndicatorAssignment {
  id         String   @id @default(uuid())
  isMain     Boolean  @default(false) // Responsable principal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  indicatorId String
  indicator   Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  @@unique([userId, indicatorId])
  @@map("indicator_assignments")
}

// ========== PACC (Plan Anual de Compras y Contrataciones) MODELS ==========

model ProcurementProcess {
  id               String   @id @default(uuid())
  description      String
  procurementType  String   // BIENES, SERVICIOS, OBRAS, CONSULTORIA, ARRENDAMIENTO, SEGURO, MANTENIMIENTO
  procurementMethod String  // LICITACION_PUBLICA, LICITACION_RESTRINGIDA, COMPARACION_PRECIOS, etc.
  estimatedAmount  Float
  currency         String   @default("DOP")
  plannedStartDate DateTime?
  plannedEndDate   DateTime?
  actualStartDate  DateTime?
  actualEndDate    DateTime?
  quarter          String?  // Q1, Q2, Q3, Q4
  month            String?
  status           String   @default("PLANIFICADO") // PLANIFICADO, EN_PROCESO, ADJUDICADO, EJECUTADO, CANCELADO
  priority         String   @default("MEDIA") // ALTA, MEDIA, BAJA
  budgetCode       String?
  isRecurrent      Boolean  @default(false)
  legalFramework   String   @default("LEY_340_06")
  observations     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  activityId       String?
  activity         Activity? @relation(fields: [activityId], references: [id])
  
  budgetAllocations BudgetAllocation[]
  activityProcurements ActivityProcurement[]
  paccSchedules         PaccSchedule[]
  paccAlerts            PaccAlert[]
  
  @@map("procurement_processes")
}

// ========== BUDGET INTEGRATION MODELS ==========

model BudgetAllocation {
  id               String   @id @default(uuid())
  budgetCode       String
  budgetType       String   // FUNCIONAMIENTO, INVERSION, TRANSFERENCIAS, SERVICIO_DEUDA
  fiscalYear       Int
  allocatedAmount  Float
  executedAmount   Float    @default(0)
  availableAmount  Float
  quarter          String?  // Q1, Q2, Q3, Q4
  month            String?
  source           String?  // RECURSOS_INTERNOS, DONACIONES, PRESTAMOS, CREDITO_PUBLICO, OTROS
  category         String?  // 100, 200, 300, 400, 500, 600 (clasificador presupuestario)
  subcategory      String?
  object           String?
  sigefCode        String?
  observations     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  activityId         String?
  activity           Activity? @relation(fields: [activityId], references: [id])
  
  procurementProcessId String?
  procurementProcess   ProcurementProcess? @relation(fields: [procurementProcessId], references: [id])
  
  budgetExecutions   BudgetExecution[]
  
  @@map("budget_allocations")
}

// ========== CORRELATION AND COMPLIANCE MODELS ==========

model PoaPaccBudgetCorrelation {
  id                   String   @id @default(uuid())
  activityId           String   @unique
  activity             Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  hasProcurementNeeds  Boolean  @default(false)
  procurementCompliance Float   @default(0) // Porcentaje de cumplimiento PACC
  
  hasBudgetAllocation  Boolean  @default(false)
  budgetCompliance     Float    @default(0) // Porcentaje de cumplimiento presupuestario
  
  overallCompliance    Float    @default(0) // Cumplimiento general POA-PACC-Budget
  
  riskLevel           String   @default("BAJO") // BAJO, MEDIO, ALTO
  complianceStatus    String   @default("EN_CUMPLIMIENTO") // EN_CUMPLIMIENTO, EN_RIESGO, INCUMPLIMIENTO
  
  lastReviewDate      DateTime @default(now())
  nextReviewDate      DateTime?
  
  observations        String?
  recommendations     String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("poa_pacc_budget_correlations")
}

model ComplianceReport {
  id              String   @id @default(uuid())
  reportType      String   // POA, PACC, BUDGET, INTEGRATED
  reportPeriod    String   // MONTHLY, QUARTERLY, ANNUAL
  fiscalYear      Int
  quarter         String?
  month           String?
  
  totalActivities         Int     @default(0)
  activitiesOnTrack      Int     @default(0)
  activitiesAtRisk       Int     @default(0)
  activitiesDelayed      Int     @default(0)
  
  totalProcurements      Int     @default(0)
  procurementsCompleted  Int     @default(0)
  procurementsInProcess  Int     @default(0)
  procurementsDelayed    Int     @default(0)
  
  totalBudget            Float   @default(0)
  budgetExecuted         Float   @default(0)
  budgetAvailable        Float   @default(0)
  executionPercentage    Float   @default(0)
  
  overallCompliance      Float   @default(0)
  complianceGrade        String? // A, B, C, D, F
  
  recommendations        String?
  actionPlan            String?
  
  generatedAt           DateTime @default(now())
  generatedBy           String?
  approvedAt            DateTime?
  approvedBy            String?
  
  @@map("compliance_reports")
}

// ========== TABLAS DE VINCULACI√ìN POA-PACC ==========

model ActivityProcurement {
  id                    String   @id @default(uuid())
  activityId            String
  procurementProcessId  String
  relationship          String   @default("REQUIRED") // REQUIRED, OPTIONAL, DEPENDENT
  priority              String   @default("MEDIUM")   // HIGH, MEDIUM, LOW
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  activity              Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  procurementProcess    ProcurementProcess @relation(fields: [procurementProcessId], references: [id], onDelete: Cascade)

  @@unique([activityId, procurementProcessId])
  @@map("activity_procurement")
}

// ========== PACC SCHEDULE AND COMPLIANCE MODELS ==========

model PaccSchedule {
  id                   String   @id @default(uuid())
  procurementProcessId String
  procurementProcess   ProcurementProcess @relation(fields: [procurementProcessId], references: [id], onDelete: Cascade)
  
  scheduledPhase       String   // PLANIFICACION, LICITACION, EVALUACION, ADJUDICACION, CONTRATACION, EJECUCION
  phaseName            String
  
  plannedStartDate     DateTime
  plannedEndDate       DateTime
  actualStartDate      DateTime?
  actualEndDate        DateTime?
  
  status               String   @default("PENDIENTE") // PENDIENTE, EN_PROCESO, COMPLETADA, RETRASADA, CANCELADA
  responsibleUserId    String?
  responsibleUser      User?    @relation(fields: [responsibleUserId], references: [id])
  
  milestones           String?  // Descripci√≥n de hitos principales
  dependencies         String?  // Dependencias del cronograma
  criticalPath         Boolean  @default(false)
  
  estimatedDuration    Int?     // Duraci√≥n estimada en d√≠as
  actualDuration       Int?     // Duraci√≥n real en d√≠as
  compliancePercentage Float    @default(0)
  
  risks                String?  // Riesgos identificados
  observations         String?  // Observaciones del progreso
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  alerts               PaccAlert[]
  
  @@map("pacc_schedules")
}

model PaccCompliance {
  id                      String   @id @default(uuid())
  evaluationPeriod        String   // 2025-01, 2025-Q1, etc.
  periodType              String   // MENSUAL, TRIMESTRAL, ANUAL
  fiscalYear              Int
  
  // Estad√≠sticas de procesos
  totalProcesses          Int      @default(0)
  processesOnSchedule     Int      @default(0)
  processesDelayed        Int      @default(0)
  processesAtRisk         Int      @default(0)
  processesCancelled      Int      @default(0)
  
  // Cumplimiento de hitos
  scheduledMilestones     Int      @default(0)
  achievedMilestones      Int      @default(0)
  delayedMilestones       Int      @default(0)
  milestoneComplianceRate Float    @default(0)
  
  // M√©tricas de tiempo
  averageDelay            Float    @default(0)
  criticalPathCompliance  Float    @default(0)
  budgetCompliance        Float    @default(0)
  
  // Puntuaciones de cumplimiento
  legalComplianceScore    Float    @default(0)
  timelinessScore         Float    @default(0)
  qualityScore            Float    @default(0)
  overallScore            Float    @default(0)
  complianceGrade         String?  // A+, A, B+, B, C+, C, D, F
  
  // An√°lisis cualitativo
  keyFindings             String?
  recommendations         String?
  actionPlan              String?
  riskFactors             String?
  mitigationMeasures      String?
  
  // Metadatos
  evaluatedBy             String?
  approvedBy              String?
  evaluatedByUser         User?    @relation("EvaluatedBy", fields: [evaluatedBy], references: [id])
  approvedByUser          User?    @relation("ApprovedBy", fields: [approvedBy], references: [id])
  evaluationDate          DateTime @default(now())
  approvalDate            DateTime?
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@map("pacc_compliances")
}

model PaccAlert {
  id                   String   @id @default(uuid())
  alertType            String   // CRITICAL_DELAY, BUDGET_THRESHOLD, DOCUMENT_EXPIRY, LEGAL_REQUIREMENT, MILESTONE_RISK
  severity             String   // BAJA, MEDIA, ALTA, CRITICA
  title                String
  description          String
  
  // Relaciones
  procurementProcessId String?
  procurementProcess   ProcurementProcess? @relation(fields: [procurementProcessId], references: [id], onDelete: Cascade)
  scheduleId           String?
  schedule             PaccSchedule?       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  
  // Fechas
  triggerDate          DateTime @default(now())
  dueDate              DateTime?
  resolvedDate         DateTime?
  
  // Estado
  status               String   @default("ACTIVA") // ACTIVA, PENDIENTE, RESUELTA, CANCELADA
  priority             String   @default("MEDIA")  // BAJA, MEDIA, ALTA, CRITICA
  
  // Detalles
  affectedMilestones   String?
  potentialImpact      String?
  suggestedActions     String?
  
  // Asignaci√≥n
  assignedTo           String?
  assignedUser         User?    @relation("AssignedTo", fields: [assignedTo], references: [id])
  createdBy            String
  escalatedTo          String?
  escalatedUser        User?    @relation("EscalatedTo", fields: [escalatedTo], references: [id])
  
  // Configuraci√≥n
  autoGenerated        Boolean  @default(false)
  requiresApproval     Boolean  @default(false)
  notificationSent     Boolean  @default(false)
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@map("pacc_alerts")
}

model PaccReport {
  id                  String   @id @default(uuid())
  reportType          String   // MONTHLY_COMPLIANCE, QUARTERLY_REVIEW, ANNUAL_SUMMARY, PROCESS_SPECIFIC
  reportPeriod        String   // 2025-01, 2025-Q1, 2025, etc.
  fiscalYear          Int
  
  // Contenido del reporte
  executiveSummary    String?
  performanceMetrics  String?  // JSON con m√©tricas clave
  processesAnalysis   String?
  achievedMilestones  String?
  pendingMilestones   String?
  riskAssessment      String?
  budgetStatus        String?
  legalCompliance     String?
  recommendations     String?
  nextPeriodPlanning  String?
  
  // Metadatos
  generatedBy         String?
  approvedBy          String?
  generatedByUser     User?    @relation("GeneratedBy", fields: [generatedBy], references: [id])
  approvedByUser      User?    @relation("ApprovedBy", fields: [approvedBy], references: [id])
  generationDate      DateTime @default(now())
  approvalDate        DateTime?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("pacc_reports")
}

// ========== ENUMS replaced with strings for SQLite compatibility ==========

// ProductType: PRODUCT, SERVICE
// IndicatorType: PRODUCT, RESULT  
// ReportingPeriod: MONTHLY, QUARTERLY, ANNUAL
// ReportStatus: DRAFT, SUBMITTED, APPROVED, REJECTED
// ProcurementType: BIENES, SERVICIOS, OBRAS, CONSULTORIA, ARRENDAMIENTO, SEGURO, MANTENIMIENTO
// ProcurementMethod: LICITACION_PUBLICA, LICITACION_RESTRINGIDA, COMPARACION_PRECIOS, COMPRA_MENOR, SUBASTA_INVERSA, CONTRATACION_DIRECTA, EMERGENCIA
// ProcurementStatus: PLANIFICADO, EN_PROCESO, ADJUDICADO, EJECUTADO, CANCELADO
// BudgetType: FUNCIONAMIENTO, INVERSION, TRANSFERENCIAS, SERVICIO_DEUDA
// ComplianceStatus: EN_CUMPLIMIENTO, EN_RIESGO, INCUMPLIMIENTO

// ========== NOTIFICATION SYSTEM MODELS ==========

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   @default("INFO") // INFO, WARNING, ERROR, SUCCESS
  priority  String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  isRead    Boolean  @default(false)
  data      String?  // JSON string for additional data
  createdAt DateTime @default(now())
  readAt    DateTime?

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// NotificationType: INFO, WARNING, ERROR, SUCCESS
// NotificationPriority: LOW, MEDIUM, HIGH, URGENT
