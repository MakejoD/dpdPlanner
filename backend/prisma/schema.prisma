// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========== AUTHENTICATION & AUTHORIZATION MODELS ==========

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  firstName    String
  lastName     String
  passwordHash String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  roleId       String
  role         Role         @relation(fields: [roleId], references: [id])
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id])
  
  // User assignments and reports
  activityAssignments   ActivityAssignment[]
  indicatorAssignments  IndicatorAssignment[]
  progressReports       ProgressReport[]
  approvedReports       ProgressReport[]     @relation("ApprovedBy")
  approvalHistory       ReportApprovalHistory[] @relation("ApprovalHistoryBy")
  
  // Budget execution relations
  budgetResponsible     BudgetExecution[]    @relation("BudgetResponsible")
  budgetModified        BudgetExecution[]    @relation("BudgetModifiedBy")
  
  // Procurement relations
  procurementCreated    ProcurementProcess[] @relation("ProcurementCreatedBy")
  procurementModified   ProcurementProcess[] @relation("ProcurementModifiedBy")
  activityProcurementLinks ActivityProcurementLink[]
  
  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users           User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id       String @id @default(uuid())
  action   String // create, read, update, delete, approve, etc.
  resource String // user, role, strategic_axis, objective, etc.
  
  // Composite unique constraint
  @@unique([action, resource])

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ========== ORGANIZATIONAL STRUCTURE ==========

model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  code        String?  @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Hierarchical structure
  parentId String?
  parent   Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children Department[] @relation("DepartmentHierarchy")

  // Relations
  users                 User[]
  strategicAxes         StrategicAxis[]
  activityAssignments   ActivityAssignment[]
  indicatorAssignments  IndicatorAssignment[]
  budgetExecutions      BudgetExecution[]
  procurementProcesses  ProcurementProcess[]

  @@map("departments")
}

// ========== POA PLANNING STRUCTURE ==========

model StrategicAxis {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String   @unique
  year        Int
  isActive    Boolean  @default(true)
  isLocked    Boolean  @default(false) // Para bloquear modificaciones una vez aprobado
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  objectives   Objective[]
  indicators   Indicator[]

  @@unique([code, year])
  @@map("strategic_axes")
}

model Objective {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  strategicAxisId String
  strategicAxis   StrategicAxis @relation(fields: [strategicAxisId], references: [id], onDelete: Cascade)
  products        Product[]
  indicators      Indicator[]

  @@unique([strategicAxisId, code])
  @@map("objectives")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String
  type        String @default("PRODUCT") // PRODUCT or SERVICE
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  objectiveId String
  objective   Objective   @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  activities  Activity[]
  indicators  Indicator[]

  @@unique([objectiveId, code])
  @@map("products")
}

model Activity {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String
  startDate   DateTime?
  endDate     DateTime?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productId           String
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  indicators          Indicator[]
  assignments         ActivityAssignment[]
  budgetExecutions    BudgetExecution[]
  progressReports     ProgressReport[]
  procurementLinks    ActivityProcurementLink[]

  @@unique([productId, code])
  @@map("activities")
}

// ========== PERFORMANCE INDICATORS ==========

model Indicator {
  id                String        @id @default(uuid())
  name              String
  description       String?
  type              String @default("PRODUCT") // PRODUCT or RESULT
  measurementUnit   String
  baseline          Float?        @default(0)
  annualTarget      Float
  reportingFrequency String       @default("QUARTERLY") // QUARTERLY or MONTHLY
  q1Target          Float?        @default(0)
  q2Target          Float?        @default(0)
  q3Target          Float?        @default(0)
  q4Target          Float?        @default(0)
  // Monthly targets (only when reportingFrequency is MONTHLY)
  jan_target        Float?        @default(0)
  feb_target        Float?        @default(0)
  mar_target        Float?        @default(0)
  apr_target        Float?        @default(0)
  may_target        Float?        @default(0)
  jun_target        Float?        @default(0)
  jul_target        Float?        @default(0)
  aug_target        Float?        @default(0)
  sep_target        Float?        @default(0)
  oct_target        Float?        @default(0)
  nov_target        Float?        @default(0)
  dec_target        Float?        @default(0)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Polymorphic relations - an indicator can belong to different levels
  strategicAxisId String?
  strategicAxis   StrategicAxis? @relation(fields: [strategicAxisId], references: [id], onDelete: Cascade)
  
  objectiveId String?
  objective   Objective? @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  // Relations
  progressReports     ProgressReport[]
  indicatorAssignments IndicatorAssignment[]

  @@map("indicators")
}

// ========== PROGRESS TRACKING ==========

model ProgressReport {
  id                  String            @id @default(uuid())
  periodType          String            // 'trimestral', 'mensual', 'semanal'
  period              String            // '2024-Q1', '2024-01', '2024-W01'
  currentValue        Float             @default(0)
  targetValue         Float             @default(0)
  executionPercentage Float             @default(0)
  qualitativeComments String?
  challenges          String?
  nextSteps           String?
  
  // Enhanced approval system
  status              String            @default("DRAFT") // DRAFT, SUBMITTED, APPROVED, REJECTED, WITHDRAWN
  reviewComments      String?
  rejectionReason     String?
  
  // Timestamps
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  submittedAt         DateTime?
  reviewedAt          DateTime?
  
  // Relations - un reporte puede ser para una actividad O un indicador, no ambos
  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  indicatorId String?
  indicator   Indicator? @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  
  reportedById String
  reportedBy   User @relation(fields: [reportedById], references: [id])
  
  reviewedById String?
  reviewedBy   User? @relation("ApprovedBy", fields: [reviewedById], references: [id])

  // File attachments
  attachments ProgressReportAttachment[]
  
  // Approval history
  approvalHistory ReportApprovalHistory[]

  @@unique([reportedById, activityId, indicatorId, periodType, period])
  @@map("progress_reports")
}

// Approval history for audit trail
model ReportApprovalHistory {
  id               String         @id @default(uuid())
  action           String         // CREATED, SUBMITTED, APPROVED, REJECTED, WITHDRAWN, MODIFIED
  comments         String?
  createdAt        DateTime       @default(now())
  
  // Relations
  progressReportId String
  progressReport   ProgressReport @relation(fields: [progressReportId], references: [id], onDelete: Cascade)
  
  actionById       String
  actionBy         User          @relation("ApprovalHistoryBy", fields: [actionById], references: [id])
  
  @@map("report_approval_history")
}

model ProgressReportAttachment {
  id             String   @id @default(uuid())
  filename       String
  filepath       String
  size           Int
  mimetype       String
  uploadedAt     DateTime @default(now())

  // Relations
  progressReportId String
  progressReport   ProgressReport @relation(fields: [progressReportId], references: [id], onDelete: Cascade)

  @@map("progress_report_attachments")
}

// ========== BUDGET EXECUTION ==========

// ========== ACTIVITY ASSIGNMENTS ==========

model ActivityAssignment {
  id         String   @id @default(uuid())
  isMain     Boolean  @default(false) // Responsable principal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  @@unique([userId, activityId])
  @@map("activity_assignments")
}

model IndicatorAssignment {
  id         String   @id @default(uuid())
  isMain     Boolean  @default(false) // Responsable principal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  indicatorId String
  indicator   Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  @@unique([userId, indicatorId])
  @@map("indicator_assignments")
}

// ========== BUDGET EXECUTION MODELS ==========

model BudgetExecution {
  id          String   @id @default(uuid())
  
  // Información básica de la partida presupuestaria
  budgetCode     String   // Código de la partida presupuestaria (ej: 2.1.1.01.001)
  budgetName     String   // Nombre de la partida presupuestaria
  description    String?  // Descripción adicional
  
  // Montos presupuestarios
  assignedAmount    Decimal  @default(0) // Monto Asignado inicial
  committedAmount   Decimal  @default(0) // Monto Comprometido (reservado)
  accruedAmount     Decimal  @default(0) // Monto Devengado (obligación contraída)
  paidAmount        Decimal  @default(0) // Monto Pagado (efectivamente pagado)
  
  // Cálculos automáticos (se calculan en la aplicación)
  commitmentPercent Decimal  @default(0) // % Compromiso = (Comprometido / Asignado) * 100
  accruedPercent    Decimal  @default(0) // % Devengado = (Devengado / Asignado) * 100
  executionPercent  Decimal  @default(0) // % Ejecución = (Pagado / Asignado) * 100
  
  // Información de programación
  fiscalYear      Int      // Año fiscal de la ejecución
  quarter         Int?     // Trimestre (1, 2, 3, 4) - opcional
  month           Int?     // Mes (1-12) - opcional
  
  // Metadatos
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastModifiedBy String?  // ID del usuario que hizo la última modificación

  // Relations
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  // Usuario responsable de la ejecución presupuestaria
  responsibleId String?
  responsible   User? @relation("BudgetResponsible", fields: [responsibleId], references: [id])
  
  // Usuario que registró/modificó por última vez
  modifiedById String?
  modifiedBy   User? @relation("BudgetModifiedBy", fields: [modifiedById], references: [id])

  @@unique([activityId, budgetCode, fiscalYear]) // Una actividad no puede tener la misma partida duplicada en el mismo año
  @@index([fiscalYear])
  @@index([activityId])
  @@index([budgetCode])
  @@map("budget_executions")
}

// ========== PROCUREMENT ANNUAL PLAN (PAC) MODELS ==========

model ProcurementProcess {
  id          String   @id @default(uuid())
  
  // Campos alineados a la DGCP (Dirección General de Contrataciones Públicas)
  cuciCode             String   // Código Único de Clasificación de Ítems
  description          String   // Descripción del Bien/Servicio
  measurementUnit      String   // Unidad de Medida (Unidad, Servicio, Global, Quintal)
  quantity             Float    // Cantidad de unidades requeridas
  unitCost             Decimal  // Costo Unitario Estimado (RD$)
  totalCost            Decimal  // Costo Total Estimado (RD$) - calculado automáticamente
  
  // Modalidad de compra
  procurementMethod    String   // Licitación Pública, Comparación de Precios, Compras Menores, Sorteo de Obras, etc.
  
  // Fuente de financiamiento
  fundingSource        String   // Fondos Propios, Préstamo Externo, etc.
  
  // Cronograma de fechas
  plannedStartDate     DateTime? // Fecha Prevista de Inicio del Proceso
  plannedAwardDate     DateTime? // Fecha Prevista de Adjudicación
  actualStartDate      DateTime? // Fecha Real de Inicio del Proceso
  actualAwardDate      DateTime? // Fecha Real de Adjudicación
  
  // Estado del proceso
  status               String   @default("PLANIFICADO") // PLANIFICADO, EN_PROCESO, ADJUDICADO, DESIERTO, CANCELADO
  
  // Información adicional
  notes                String?  // Observaciones adicionales
  contractNumber       String?  // Número de contrato (cuando sea adjudicado)
  supplierName         String?  // Nombre del proveedor adjudicado
  awardedAmount        Decimal? // Monto adjudicado final
  
  // Control de versiones y auditoria
  fiscalYear          Int      // Año fiscal del PAC
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Usuario que creó/modificó
  createdById         String
  createdBy           User     @relation("ProcurementCreatedBy", fields: [createdById], references: [id])
  lastModifiedById    String?
  lastModifiedBy      User?    @relation("ProcurementModifiedBy", fields: [lastModifiedById], references: [id])
  
  // Departamento responsable
  departmentId        String?
  department          Department? @relation(fields: [departmentId], references: [id])
  
  // Relación con actividades del POA (muchos a muchos)
  activityLinks       ActivityProcurementLink[]
  
  @@index([fiscalYear])
  @@index([status])
  @@index([cuciCode])
  @@map("procurement_processes")
}

// Tabla pivote para la relación muchos a muchos entre Activity y ProcurementProcess
model ActivityProcurementLink {
  id                    String   @id @default(uuid())
  
  // Información de la vinculación
  linkReason            String?  // Razón de la vinculación
  isEssential           Boolean  @default(true) // Si la compra es esencial para la actividad
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Usuario que creó la vinculación
  linkedById            String
  linkedBy              User     @relation(fields: [linkedById], references: [id])
  
  // Relaciones
  activityId            String
  activity              Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  procurementProcessId  String
  procurementProcess    ProcurementProcess @relation(fields: [procurementProcessId], references: [id], onDelete: Cascade)
  
  @@unique([activityId, procurementProcessId])
  @@map("activity_procurement_links")
}

// ========== ENUMS replaced with strings for SQLite compatibility ==========

// ProductType: PRODUCT, SERVICE
// IndicatorType: PRODUCT, RESULT  
// ReportingPeriod: MONTHLY, QUARTERLY, ANNUAL
// ReportStatus: DRAFT, SUBMITTED, APPROVED, REJECTED
