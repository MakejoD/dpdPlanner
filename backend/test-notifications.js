const { PrismaClient } = require('@prisma/client')
const io = require('socket.io-client')

const prisma = new PrismaClient()

async function testNotifications() {
  console.log('üß™ Iniciando prueba del sistema de notificaciones...')

  try {
    // 1. Obtener un usuario de prueba
    const user = await prisma.user.findFirst({
      where: { email: 'admin@poa.gov' }
    })

    if (!user) {
      console.log('‚ùå No se encontr√≥ el usuario admin@poa.gov')
      return
    }

    console.log(`üë§ Usuario encontrado: ${user.firstName} ${user.lastName} (ID: ${user.id})`)

    // 2. Crear notificaciones de prueba usando la API
    const testNotifications = [
      {
        title: 'üéâ ¬°Bienvenido al sistema POA!',
        message: 'El sistema de notificaciones en tiempo real est√° funcionando correctamente.',
        type: 'SUCCESS',
        priority: 'HIGH'
      },
      {
        title: '‚ö†Ô∏è Reporte pendiente',
        message: 'Tienes un reporte de progreso pendiente que vence ma√±ana.',
        type: 'WARNING',
        priority: 'URGENT'
      },
      {
        title: 'üìä Nuevo indicador disponible',
        message: 'Se ha agregado un nuevo indicador para tu revisi√≥n.',
        type: 'INFO',
        priority: 'MEDIUM'
      },
      {
        title: 'üí∞ Actualizaci√≥n presupuestaria',
        message: 'Se ha actualizado la informaci√≥n presupuestaria de tu departamento.',
        type: 'INFO',
        priority: 'LOW'
      }
    ]

    // 3. Crear las notificaciones en la base de datos
    for (const notification of testNotifications) {
      const created = await prisma.notification.create({
        data: {
          userId: user.id,
          title: notification.title,
          message: notification.message,
          type: notification.type,
          priority: notification.priority,
          isRead: false
        }
      })
      
      console.log(`‚úÖ Notificaci√≥n creada: ${created.title}`)
    }

    // 4. Probar la conexi√≥n WebSocket
    console.log('\nüîå Probando conexi√≥n WebSocket...')
    
    const socket = io('http://localhost:3001', {
      auth: {
        userId: user.id
      }
    })

    socket.on('connect', () => {
      console.log('‚úÖ Conectado al servidor WebSocket')
      
      // Enviar una notificaci√≥n en tiempo real
      setTimeout(() => {
        socket.emit('test-notification', {
          userId: user.id,
          title: 'üöÄ Notificaci√≥n en tiempo real',
          message: 'Esta notificaci√≥n fue enviada a trav√©s de WebSocket.',
          type: 'SUCCESS',
          priority: 'HIGH'
        })
        
        console.log('üì® Notificaci√≥n en tiempo real enviada')
      }, 2000)
    })

    socket.on('notification', (data) => {
      console.log('üì© Notificaci√≥n recibida via WebSocket:', data.title)
    })

    socket.on('connect_error', (error) => {
      console.log('‚ùå Error de conexi√≥n WebSocket:', error.message)
    })

    // 5. Mostrar resumen
    const totalNotifications = await prisma.notification.count({
      where: { userId: user.id }
    })

    const unreadNotifications = await prisma.notification.count({
      where: { 
        userId: user.id,
        isRead: false 
      }
    })

    console.log('\nüìä Resumen del sistema de notificaciones:')
    console.log(`   - Total de notificaciones: ${totalNotifications}`)
    console.log(`   - No le√≠das: ${unreadNotifications}`)
    console.log(`   - Usuario de prueba: ${user.email}`)
    console.log('\nüéØ Para probar el sistema:')
    console.log('   1. Abre http://localhost:5175 en tu navegador')
    console.log('   2. Inicia sesi√≥n con: admin@poa.gov / admin123456')
    console.log('   3. Busca el √≠cono de notificaciones en el header')
    console.log('   4. Deber√≠as ver las notificaciones de prueba')

    // Mantener la conexi√≥n por 10 segundos m√°s
    setTimeout(() => {
      socket.disconnect()
      console.log('\n‚úÖ Prueba completada')
      process.exit(0)
    }, 10000)

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error)
    process.exit(1)
  }
}

testNotifications()
