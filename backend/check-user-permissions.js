const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkUserPermissions() {
  console.log('üîç VERIFICANDO PERMISOS DE USUARIOS\n');
  
  try {
    // Obtener todos los usuarios con roles y permisos
    const users = await prisma.user.findMany({
      include: {
        role: {
          include: {
            rolePermissions: {
              include: {
                permission: true
              }
            }
          }
        }
      }
    });
    
    console.log('üë• USUARIOS Y PERMISOS:');
    console.log('======================\n');
    
    for (const user of users) {
      console.log(`üìß ${user.email}`);
      console.log(`üë§ ${user.firstName} ${user.lastName}`);
      console.log(`üé≠ Rol: ${user.role.name}`);
      console.log(`üìã Permisos (${user.role.rolePermissions.length}):`);
      
      const permissions = user.role.rolePermissions.map(rp => 
        `  ‚Ä¢ ${rp.permission.action}:${rp.permission.resource}`
      );
      
      console.log(permissions.join('\n'));
      
      // Verificar permisos espec√≠ficos que est√°n fallando
      const hasReadRole = user.role.rolePermissions.some(rp => 
        rp.permission.action === 'read' && rp.permission.resource === 'role'
      );
      const hasReadDepartment = user.role.rolePermissions.some(rp => 
        rp.permission.action === 'read' && rp.permission.resource === 'department'
      );
      
      console.log(`‚úÖ Puede leer roles: ${hasReadRole ? 'S√ç' : 'NO'}`);
      console.log(`‚úÖ Puede leer departamentos: ${hasReadDepartment ? 'S√ç' : 'NO'}`);
      console.log('‚îÄ'.repeat(50));
    }
    
    // Verificar permisos disponibles
    console.log('\nüîê PERMISOS DISPONIBLES EN EL SISTEMA:');
    console.log('=====================================\n');
    
    const permissions = await prisma.permission.findMany({
      orderBy: [
        { resource: 'asc' },
        { action: 'asc' }
      ]
    });
    
    let currentResource = '';
    for (const permission of permissions) {
      if (permission.resource !== currentResource) {
        console.log(`\nüìÇ ${permission.resource.toUpperCase()}:`);
        currentResource = permission.resource;
      }
      console.log(`  ‚Ä¢ ${permission.action}:${permission.resource}`);
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserPermissions();
