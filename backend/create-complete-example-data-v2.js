const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createCompleteExampleData() {
  try {
    console.log('üöÄ Iniciando creaci√≥n de datos de ejemplo completos...');

    // Limpiar datos existentes en orden correcto
    console.log('üßπ Limpiando datos existentes...');
    await prisma.activityAssignment.deleteMany({});
    await prisma.activity.deleteMany({});
    await prisma.product.deleteMany({});
    await prisma.objective.deleteMany({});
    await prisma.strategicAxis.deleteMany({});

    // ========== 1. DEPARTAMENTOS ==========
    console.log('üìã Creando departamentos...');
    
    const departments = await Promise.all([
      prisma.department.upsert({
        where: { code: 'DG' },
        update: {},
        create: {
          name: 'Direcci√≥n General',
          code: 'DG',
          description: 'Direcci√≥n General de la instituci√≥n',
          isActive: true
        }
      }),
      prisma.department.upsert({
        where: { code: 'DP' },
        update: {},
        create: {
          name: 'Direcci√≥n de Planificaci√≥n',
          code: 'DP',
          description: 'Responsable de la planificaci√≥n estrat√©gica y operativa',
          isActive: true
        }
      }),
      prisma.department.upsert({
        where: { code: 'DA' },
        update: {},
        create: {
          name: 'Direcci√≥n Administrativa',
          code: 'DA',
          description: 'Gesti√≥n administrativa y recursos humanos',
          isActive: true
        }
      }),
      prisma.department.upsert({
        where: { code: 'DF' },
        update: {},
        create: {
          name: 'Direcci√≥n Financiera',
          code: 'DF',
          description: 'Gesti√≥n financiera y presupuestaria',
          isActive: true
        }
      }),
      prisma.department.upsert({
        where: { code: 'DC' },
        update: {},
        create: {
          name: 'Direcci√≥n de Compras',
          code: 'DC',
          description: 'Gesti√≥n de procesos de contrataci√≥n y compras',
          isActive: true
        }
      }),
      prisma.department.upsert({
        where: { code: 'DT' },
        update: {},
        create: {
          name: 'Direcci√≥n de Tecnolog√≠a',
          code: 'DT',
          description: 'Gesti√≥n de tecnolog√≠a e innovaci√≥n',
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ ${departments.length} departamentos creados`);

    // ========== 2. ROLES ==========
    console.log('üë§ Creando roles...');
    
    const roles = await Promise.all([
      prisma.role.upsert({
        where: { name: 'SUPER_ADMIN' },
        update: {},
        create: {
          name: 'SUPER_ADMIN',
          description: 'Super administrador con acceso total al sistema'
        }
      }),
      prisma.role.upsert({
        where: { name: 'ADMIN' },
        update: {},
        create: {
          name: 'ADMIN',
          description: 'Administrador con acceso completo al POA'
        }
      }),
      prisma.role.upsert({
        where: { name: 'PLANNER' },
        update: {},
        create: {
          name: 'PLANNER',
          description: 'Planificador - puede crear y editar POA'
        }
      }),
      prisma.role.upsert({
        where: { name: 'COORDINATOR' },
        update: {},
        create: {
          name: 'COORDINATOR',
          description: 'Coordinador - supervisa actividades asignadas'
        }
      }),
      prisma.role.upsert({
        where: { name: 'EXECUTOR' },
        update: {},
        create: {
          name: 'EXECUTOR',
          description: 'Ejecutor - realiza actividades y reporta progreso'
        }
      }),
      prisma.role.upsert({
        where: { name: 'BUDGET_MANAGER' },
        update: {},
        create: {
          name: 'BUDGET_MANAGER',
          description: 'Gestor de presupuesto - maneja ejecuci√≥n presupuestaria'
        }
      }),
      prisma.role.upsert({
        where: { name: 'PROCUREMENT_OFFICER' },
        update: {},
        create: {
          name: 'PROCUREMENT_OFFICER',
          description: 'Oficial de compras - gestiona procesos de contrataci√≥n'
        }
      }),
      prisma.role.upsert({
        where: { name: 'VIEWER' },
        update: {},
        create: {
          name: 'VIEWER',
          description: 'Consultor - solo lectura de reportes y seguimiento'
        }
      })
    ]);

    console.log(`‚úÖ ${roles.length} roles creados`);

    // ========== 3. USUARIOS ==========
    console.log('üë• Creando usuarios...');
    
    const hashedPassword = await bcrypt.hash('admin123', 10);
    
    const users = await Promise.all([
      // Direcci√≥n General
      prisma.user.upsert({
        where: { email: 'director.general@poa.gov.do' },
        update: {},
        create: {
          email: 'director.general@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Mar√≠a Elena',
          lastName: 'Rodr√≠guez P√©rez',
          roleId: roles.find(r => r.name === 'SUPER_ADMIN').id,
          departmentId: departments.find(d => d.code === 'DG').id,
          isActive: true
        }
      }),
      
      // Direcci√≥n de Planificaci√≥n
      prisma.user.upsert({
        where: { email: 'planificacion@poa.gov.do' },
        update: {},
        create: {
          email: 'planificacion@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Carlos Alberto',
          lastName: 'Mart√≠nez L√≥pez',
          roleId: roles.find(r => r.name === 'ADMIN').id,
          departmentId: departments.find(d => d.code === 'DP').id,
          isActive: true
        }
      }),
      
      prisma.user.upsert({
        where: { email: 'ana.planificadora@poa.gov.do' },
        update: {},
        create: {
          email: 'ana.planificadora@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Ana Mar√≠a',
          lastName: 'Gonz√°lez Fern√°ndez',
          roleId: roles.find(r => r.name === 'PLANNER').id,
          departmentId: departments.find(d => d.code === 'DP').id,
          isActive: true
        }
      }),
      
      // Direcci√≥n Administrativa
      prisma.user.upsert({
        where: { email: 'luis.admin@poa.gov.do' },
        update: {},
        create: {
          email: 'luis.admin@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Luis Fernando',
          lastName: 'Jim√©nez Castro',
          roleId: roles.find(r => r.name === 'COORDINATOR').id,
          departmentId: departments.find(d => d.code === 'DA').id,
          isActive: true
        }
      }),
      
      // Direcci√≥n Financiera
      prisma.user.upsert({
        where: { email: 'presupuesto@poa.gov.do' },
        update: {},
        create: {
          email: 'presupuesto@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Carmen Rosa',
          lastName: 'Valdez Morales',
          roleId: roles.find(r => r.name === 'BUDGET_MANAGER').id,
          departmentId: departments.find(d => d.code === 'DF').id,
          isActive: true
        }
      }),
      
      // Direcci√≥n de Compras
      prisma.user.upsert({
        where: { email: 'compras@poa.gov.do' },
        update: {},
        create: {
          email: 'compras@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Roberto Carlos',
          lastName: 'Herrera N√∫√±ez',
          roleId: roles.find(r => r.name === 'PROCUREMENT_OFFICER').id,
          departmentId: departments.find(d => d.code === 'DC').id,
          isActive: true
        }
      }),
      
      // Direcci√≥n de Tecnolog√≠a
      prisma.user.upsert({
        where: { email: 'tecnologia@poa.gov.do' },
        update: {},
        create: {
          email: 'tecnologia@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Patricia Isabel',
          lastName: 'Ram√≠rez Torres',
          roleId: roles.find(r => r.name === 'EXECUTOR').id,
          departmentId: departments.find(d => d.code === 'DT').id,
          isActive: true
        }
      }),
      
      // Ejecutores adicionales
      prisma.user.upsert({
        where: { email: 'ejecutor1@poa.gov.do' },
        update: {},
        create: {
          email: 'ejecutor1@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Miguel √Ångel',
          lastName: 'Reyes Santana',
          roleId: roles.find(r => r.name === 'EXECUTOR').id,
          departmentId: departments.find(d => d.code === 'DP').id,
          isActive: true
        }
      }),
      
      prisma.user.upsert({
        where: { email: 'consultor@poa.gov.do' },
        update: {},
        create: {
          email: 'consultor@poa.gov.do',
          passwordHash: hashedPassword,
          firstName: 'Sandra Milena',
          lastName: 'Acosta Rivera',
          roleId: roles.find(r => r.name === 'VIEWER').id,
          departmentId: departments.find(d => d.code === 'DG').id,
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ ${users.length} usuarios creados`);

    // ========== 4. EJES ESTRAT√âGICOS ==========
    console.log('üéØ Creando ejes estrat√©gicos...');
    
    const strategicAxes = await Promise.all([
      prisma.strategicAxis.create({
        data: {
          name: 'Modernizaci√≥n de la Gesti√≥n P√∫blica',
          description: 'Fortalecimiento de la capacidad institucional y modernizaci√≥n de procesos para mejorar la eficiencia del sector p√∫blico',
          code: 'EJE-001-2025',
          year: 2025,
          departmentId: departments.find(d => d.code === 'DG').id,
          isActive: true,
          isLocked: false
        }
      }),
      
      prisma.strategicAxis.create({
        data: {
          name: 'Transparencia y Rendici√≥n de Cuentas',
          description: 'Implementaci√≥n de mecanismos de transparencia y rendici√≥n de cuentas para fortalecer la confianza ciudadana',
          code: 'EJE-002-2025',
          year: 2025,
          departmentId: departments.find(d => d.code === 'DG').id,
          isActive: true,
          isLocked: false
        }
      }),
      
      prisma.strategicAxis.create({
        data: {
          name: 'Innovaci√≥n y Transformaci√≥n Digital',
          description: 'Adopci√≥n de tecnolog√≠as digitales para mejorar los servicios p√∫blicos y la experiencia ciudadana',
          code: 'EJE-003-2025',
          year: 2025,
          departmentId: departments.find(d => d.code === 'DT').id,
          isActive: true,
          isLocked: false
        }
      }),
      
      prisma.strategicAxis.create({
        data: {
          name: 'Eficiencia en el Gasto P√∫blico',
          description: 'Optimizaci√≥n del uso de recursos p√∫blicos mediante mejores pr√°cticas de planificaci√≥n y ejecuci√≥n presupuestaria',
          code: 'EJE-004-2025',
          year: 2025,
          departmentId: departments.find(d => d.code === 'DF').id,
          isActive: true,
          isLocked: false
        }
      })
    ]);

    console.log(`‚úÖ ${strategicAxes.length} ejes estrat√©gicos creados`);

    // ========== 5. OBJETIVOS ==========
    console.log('üéØ Creando objetivos...');
    
    const objectives = await Promise.all([
      // Objetivos para EJE-001
      prisma.objective.create({
        data: {
          name: 'Implementar sistema integrado de planificaci√≥n',
          description: 'Desarrollar e implementar un sistema integrado POA-PACC-Presupuesto que mejore la coordinaci√≥n institucional',
          code: 'OBJ-001-2025',
          order: 1,
          strategicAxisId: strategicAxes.find(s => s.code === 'EJE-001-2025').id,
          isActive: true
        }
      }),
      
      prisma.objective.create({
        data: {
          name: 'Fortalecer capacidades del personal',
          description: 'Desarrollar competencias del personal en planificaci√≥n estrat√©gica y operativa',
          code: 'OBJ-002-2025',
          order: 2,
          strategicAxisId: strategicAxes.find(s => s.code === 'EJE-001-2025').id,
          isActive: true
        }
      }),
      
      // Objetivos para EJE-002
      prisma.objective.create({
        data: {
          name: 'Mejorar portal de transparencia',
          description: 'Actualizar y mejorar el portal de transparencia institucional con informaci√≥n en tiempo real',
          code: 'OBJ-003-2025',
          order: 1,
          strategicAxisId: strategicAxes.find(s => s.code === 'EJE-002-2025').id,
          isActive: true
        }
      }),
      
      prisma.objective.create({
        data: {
          name: 'Implementar sistema de seguimiento ciudadano',
          description: 'Crear mecanismos para que la ciudadan√≠a pueda dar seguimiento a proyectos y programas',
          code: 'OBJ-004-2025',
          order: 2,
          strategicAxisId: strategicAxes.find(s => s.code === 'EJE-002-2025').id,
          isActive: true
        }
      }),
      
      // Objetivos para EJE-003
      prisma.objective.create({
        data: {
          name: 'Digitalizar servicios prioritarios',
          description: 'Transformar digitalmente los 10 servicios m√°s demandados por la ciudadan√≠a',
          code: 'OBJ-005-2025',
          order: 1,
          strategicAxisId: strategicAxes.find(s => s.code === 'EJE-003-2025').id,
          isActive: true
        }
      }),
      
      // Objetivos para EJE-004
      prisma.objective.create({
        data: {
          name: 'Optimizar procesos de contrataci√≥n',
          description: 'Mejorar la eficiencia y transparencia en los procesos de contrataci√≥n p√∫blica',
          code: 'OBJ-006-2025',
          order: 1,
          strategicAxisId: strategicAxes.find(s => s.code === 'EJE-004-2025').id,
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ ${objectives.length} objetivos creados`);

    // ========== 6. PRODUCTOS ==========
    console.log('üì¶ Creando productos...');
    
    const products = await Promise.all([
      // Productos para OBJ-001
      prisma.product.create({
        data: {
          name: 'Sistema POA-PACC-Presupuesto',
          description: 'Plataforma web integrada para la gesti√≥n del POA, PACC y Presupuesto institucional',
          code: 'PROD-001-2025',
          type: 'PRODUCT',
          order: 1,
          objectiveId: objectives.find(o => o.code === 'OBJ-001-2025').id,
          isActive: true
        }
      }),
      
      prisma.product.create({
        data: {
          name: 'Manual de procedimientos POA',
          description: 'Manual actualizado de procedimientos para la elaboraci√≥n y seguimiento del POA',
          code: 'PROD-002-2025',
          type: 'PRODUCT',
          order: 2,
          objectiveId: objectives.find(o => o.code === 'OBJ-001-2025').id,
          isActive: true
        }
      }),
      
      // Productos para OBJ-002
      prisma.product.create({
        data: {
          name: 'Programa de capacitaci√≥n en planificaci√≥n',
          description: 'Programa integral de capacitaci√≥n del personal en herramientas de planificaci√≥n estrat√©gica',
          code: 'PROD-003-2025',
          type: 'PRODUCT',
          order: 1,
          objectiveId: objectives.find(o => o.code === 'OBJ-002-2025').id,
          isActive: true
        }
      }),
      
      // Productos para OBJ-003
      prisma.product.create({
        data: {
          name: 'Portal de transparencia renovado',
          description: 'Portal web renovado con informaci√≥n actualizada y funcionalidades mejoradas',
          code: 'PROD-004-2025',
          type: 'PRODUCT',
          order: 1,
          objectiveId: objectives.find(o => o.code === 'OBJ-003-2025').id,
          isActive: true
        }
      }),
      
      // Productos para OBJ-004
      prisma.product.create({
        data: {
          name: 'App de seguimiento ciudadano',
          description: 'Aplicaci√≥n m√≥vil para seguimiento de proyectos y servicios por parte de la ciudadan√≠a',
          code: 'PROD-005-2025',
          type: 'PRODUCT',
          order: 1,
          objectiveId: objectives.find(o => o.code === 'OBJ-004-2025').id,
          isActive: true
        }
      }),
      
      // Productos para OBJ-005
      prisma.product.create({
        data: {
          name: 'Servicios digitales prioritarios',
          description: 'Conjunto de 10 servicios digitalizados de alta demanda ciudadana',
          code: 'PROD-006-2025',
          type: 'PRODUCT',
          order: 1,
          objectiveId: objectives.find(o => o.code === 'OBJ-005-2025').id,
          isActive: true
        }
      }),
      
      // Productos para OBJ-006
      prisma.product.create({
        data: {
          name: 'Sistema de contrataci√≥n optimizado',
          description: 'Sistema mejorado de gesti√≥n de procesos de contrataci√≥n p√∫blica',
          code: 'PROD-007-2025',
          type: 'PRODUCT',
          order: 1,
          objectiveId: objectives.find(o => o.code === 'OBJ-006-2025').id,
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ ${products.length} productos creados`);

    // ========== 7. ACTIVIDADES ==========
    console.log('üìã Creando actividades...');
    
    const activities = await Promise.all([
      // Actividades para PROD-001 (Sistema POA-PACC-Presupuesto)
      prisma.activity.create({
        data: {
          name: 'An√°lisis y dise√±o del sistema',
          description: 'Realizar an√°lisis de requerimientos y dise√±o de la arquitectura del sistema POA-PACC-Presupuesto',
          code: 'ACT-001-2025',
          productId: products.find(p => p.code === 'PROD-001-2025').id,
          startDate: new Date('2025-01-15'),
          endDate: new Date('2025-03-31'),
          order: 1,
          isActive: true
        }
      }),
      
      prisma.activity.create({
        data: {
          name: 'Desarrollo del sistema',
          description: 'Desarrollo e implementaci√≥n de la plataforma web integrada',
          code: 'ACT-002-2025',
          productId: products.find(p => p.code === 'PROD-001-2025').id,
          startDate: new Date('2025-04-01'),
          endDate: new Date('2025-08-31'),
          order: 2,
          isActive: true
        }
      }),
      
      prisma.activity.create({
        data: {
          name: 'Pruebas y capacitaci√≥n',
          description: 'Realizar pruebas del sistema y capacitar a los usuarios finales',
          code: 'ACT-003-2025',
          productId: products.find(p => p.code === 'PROD-001-2025').id,
          startDate: new Date('2025-09-01'),
          endDate: new Date('2025-10-31'),
          order: 3,
          isActive: true
        }
      }),
      
      // Actividades para PROD-002 (Manual de procedimientos)
      prisma.activity.create({
        data: {
          name: 'Revisi√≥n de procedimientos actuales',
          description: 'An√°lisis y documentaci√≥n de los procedimientos actuales del POA',
          code: 'ACT-004-2025',
          productId: products.find(p => p.code === 'PROD-002-2025').id,
          startDate: new Date('2025-02-01'),
          endDate: new Date('2025-03-31'),
          order: 1,
          isActive: true
        }
      }),
      
      prisma.activity.create({
        data: {
          name: 'Elaboraci√≥n del manual actualizado',
          description: 'Redacci√≥n y dise√±o del manual de procedimientos actualizado',
          code: 'ACT-005-2025',
          productId: products.find(p => p.code === 'PROD-002-2025').id,
          startDate: new Date('2025-04-01'),
          endDate: new Date('2025-05-31'),
          order: 2,
          isActive: true
        }
      }),
      
      // Actividades para PROD-003 (Programa de capacitaci√≥n)
      prisma.activity.create({
        data: {
          name: 'Dise√±o del programa de capacitaci√≥n',
          description: 'Dise√±ar el curr√≠culo y metodolog√≠a del programa de capacitaci√≥n',
          code: 'ACT-006-2025',
          productId: products.find(p => p.code === 'PROD-003-2025').id,
          startDate: new Date('2025-03-01'),
          endDate: new Date('2025-04-30'),
          order: 1,
          isActive: true
        }
      }),
      
      prisma.activity.create({
        data: {
          name: 'Ejecuci√≥n de capacitaciones',
          description: 'Implementar el programa de capacitaci√≥n para todo el personal',
          code: 'ACT-007-2025',
          productId: products.find(p => p.code === 'PROD-003-2025').id,
          startDate: new Date('2025-05-01'),
          endDate: new Date('2025-09-30'),
          order: 2,
          isActive: true
        }
      }),
      
      // Actividades para PROD-004 (Portal de transparencia)
      prisma.activity.create({
        data: {
          name: 'Redise√±o del portal web',
          description: 'Actualizar el dise√±o y funcionalidades del portal de transparencia',
          code: 'ACT-008-2025',
          productId: products.find(p => p.code === 'PROD-004-2025').id,
          startDate: new Date('2025-02-15'),
          endDate: new Date('2025-06-30'),
          order: 1,
          isActive: true
        }
      }),
      
      // Actividades para PROD-005 (App ciudadana)
      prisma.activity.create({
        data: {
          name: 'Desarrollo de aplicaci√≥n m√≥vil',
          description: 'Crear aplicaci√≥n m√≥vil para seguimiento ciudadano de proyectos',
          code: 'ACT-009-2025',
          productId: products.find(p => p.code === 'PROD-005-2025').id,
          startDate: new Date('2025-04-01'),
          endDate: new Date('2025-08-31'),
          order: 1,
          isActive: true
        }
      }),
      
      // Actividades para PROD-006 (Servicios digitales)
      prisma.activity.create({
        data: {
          name: 'Digitalizaci√≥n de servicios prioritarios',
          description: 'Digitalizar los 10 servicios de mayor demanda ciudadana',
          code: 'ACT-010-2025',
          productId: products.find(p => p.code === 'PROD-006-2025').id,
          startDate: new Date('2025-03-01'),
          endDate: new Date('2025-11-30'),
          order: 1,
          isActive: true
        }
      }),
      
      // Actividades para PROD-007 (Sistema de contrataci√≥n)
      prisma.activity.create({
        data: {
          name: 'Optimizaci√≥n de procesos de contrataci√≥n',
          description: 'Mejorar y automatizar los procesos de contrataci√≥n p√∫blica',
          code: 'ACT-011-2025',
          productId: products.find(p => p.code === 'PROD-007-2025').id,
          startDate: new Date('2025-02-01'),
          endDate: new Date('2025-07-31'),
          order: 1,
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ ${activities.length} actividades creadas`);

    // ========== 8. ASIGNACIONES DE ACTIVIDADES ==========
    console.log('üë§ Creando asignaciones de actividades...');
    
    const assignments = await Promise.all([
      // ACT-001: An√°lisis y dise√±o del sistema
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-001-2025').id,
          userId: users.find(u => u.email === 'tecnologia@poa.gov.do').id,
          isMain: true
        }
      }),
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-001-2025').id,
          userId: users.find(u => u.email === 'ana.planificadora@poa.gov.do').id,
          isMain: false
        }
      }),
      
      // ACT-002: Desarrollo del sistema
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-002-2025').id,
          userId: users.find(u => u.email === 'tecnologia@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-003: Pruebas y capacitaci√≥n
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-003-2025').id,
          userId: users.find(u => u.email === 'luis.admin@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-004: Revisi√≥n de procedimientos
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-004-2025').id,
          userId: users.find(u => u.email === 'ana.planificadora@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-005: Elaboraci√≥n del manual
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-005-2025').id,
          userId: users.find(u => u.email === 'planificacion@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-006: Dise√±o del programa de capacitaci√≥n
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-006-2025').id,
          userId: users.find(u => u.email === 'luis.admin@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-007: Ejecuci√≥n de capacitaciones
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-007-2025').id,
          userId: users.find(u => u.email === 'ejecutor1@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-008: Redise√±o del portal
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-008-2025').id,
          userId: users.find(u => u.email === 'tecnologia@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-009: Desarrollo de app m√≥vil
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-009-2025').id,
          userId: users.find(u => u.email === 'tecnologia@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-010: Digitalizaci√≥n de servicios
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-010-2025').id,
          userId: users.find(u => u.email === 'ejecutor1@poa.gov.do').id,
          isMain: true
        }
      }),
      
      // ACT-011: Optimizaci√≥n de contrataci√≥n
      prisma.activityAssignment.create({
        data: {
          activityId: activities.find(a => a.code === 'ACT-011-2025').id,
          userId: users.find(u => u.email === 'compras@poa.gov.do').id,
          isMain: true
        }
      })
    ]);

    console.log(`‚úÖ ${assignments.length} asignaciones creadas`);

    console.log('üéâ ¬°Datos de ejemplo completos creados exitosamente!');
    console.log('\nüìä RESUMEN:');
    console.log(`- ${departments.length} Departamentos`);
    console.log(`- ${roles.length} Roles`);
    console.log(`- ${users.length} Usuarios`);
    console.log(`- ${strategicAxes.length} Ejes Estrat√©gicos`);
    console.log(`- ${objectives.length} Objetivos`);
    console.log(`- ${products.length} Productos`);
    console.log(`- ${activities.length} Actividades`);
    console.log(`- ${assignments.length} Asignaciones`);

  } catch (error) {
    console.error('‚ùå Error creando datos de ejemplo:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar solo si se llama directamente
if (require.main === module) {
  createCompleteExampleData()
    .then(() => {
      console.log('‚úÖ Script completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en el script:', error);
      process.exit(1);
    });
}

module.exports = { createCompleteExampleData };
